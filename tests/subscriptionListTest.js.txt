console.log('starting test');
var chai = require('chai');
var chaiHttp = require('chai-http');
var async = require('async');

var assert = chai.assert;
var expect = chai.expect;
var should = chai.should();

var http = require('http');
chai.use(chaiHttp);

if (!global.Promise) {
  var q = require('q');
  chai.request.addPromises(q.Promise);
}

describe('Test server with no arguments', function () {
	this.timeout(15000);
	  
    it('should return 200', function (done) {
	http.get('http://pennypinchers.azurewebsites.net/app/item/user/11', function (res) {
        assert.equal(200, res.statusCode);
        done();
      });
    });	

	it('should return a list of two subscriptionItem objects', function(done){
		 chai.request('http://pennypinchers.azurewebsites.net/')
		 .get('/app/item/user/11') // gotta change to use my's sso
		 .end(function (err, res) {
			expect(err).to.be.null;
            expect(res).to.be.json;
            expect(res.body).to.have.length(2);
			for(var i = 0; i < body.length; i++) {
				expect(res.body[i]).to.have.property('listId').that.is.a('number');
				expect(res.body[i]).to.have.property('itemId').that.is.a('number');
				expect(res.body[i]).to.have.property('serviceName').that.is.a('string');
				expect(res.body[i]).to.have.property('addDate').that.is.a('string');
				expect(res.body[i]).to.have.property('dueDate').that.is.a('string');
				expect(res.body[i]).to.have.property('price').that.is.a('number');
				expect(res.body[i]).to.have.property('isArchived').that.is.a('boolean');
				expect(res.body[i]).to.have.property('subscriptionType').that.is.a('string');
			}
			done();
            
		 });
	});
});

 